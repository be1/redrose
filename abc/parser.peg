%auxil "struct abc *"
%value "char"
%common {
#include "abc.h"
}

%earlysource {
#define _GNU_SOURCE
#include <stdio.h>
}

%source {
#define PCC_GETCHAR(auxil) get_char(auxil)
static int get_char(struct abc* auxil) {
	if (auxil->error)
		return -1;

	if (auxil->buffer->count == auxil->buffer->index)
		return -1;

	return auxil->buffer->buf[auxil->buffer->index++];
}

#define PCC_ERROR(auxil) gen_error(auxil)
static void gen_error(struct abc* auxil) {
	int line = 1;
	int l = 0;
	for (int i = 0; i < auxil->buffer->index; i++) {
		if (auxil->buffer->buf[i] == '\n') {
			line++;
			l = i + 1;
		}
	}

	auxil->error = 1;
	auxil->error_line = line;
	auxil->error_char = auxil->buffer->index - l;
}

}

TuneBook <- Ignored* Tune TuneBook
	/ EOF

Ignored <- Ps
	/ Text
	/ Comment EOL
	/ EOL

Ps <- BeginPs (!EndPs .)* EndPs
BeginPs <- "%%beginps" EOL
EndPs <- "%%endps" EOL

Text <- BeginText (!EndText .)* EndText
BeginText <- "%%begintext" EOL
EndText <- "%%endtext" EOL

Tune <- Xheader EOL (Header EOL)* (Kheader EOL)? (Comment EOL)* Score (Words EOL)* EOL?

Words <- "W:" [ \t]* (!EOL .)*

Header <- Oheader
	/ Comment

Xheader <- "X:" [ \t]* Xvalue

Xvalue <- < [1-9][0-9]* > { abc_tune_append(auxil, $0); }

Kheader <- "K:" [ \t]* < (!EOL .)+ > { abc_header_append(auxil, $1, 'K'); }

Iheader <- "I:" [ \t]* < !"linebreak" (!EOL .)* > { abc_header_append(auxil, $1, 'I'); }
    / "I:" [ \t]* "linebreak" [ \t]* < (!EOL .)+ > { if (strlen($2) == 1) auxil->tunes[auxil->count -1]->lbc = ($2)[0]; else if (!strcmp($2, "<none>")) auxil->tunes[auxil->count - 1]->lbc = '\0'; }
HeaderKey <- < [ABCDFGHLMNOPQRSTUWZ] > { $$ = ($0)[0]; }
Oheader <- Iheader
    / key:HeaderKey ":" [ \t]* < (!EOL .)* > { abc_header_append(auxil, $1, key); }
	/ VoiceDef

VoiceDef <- "V:" (!EOL .)+

Score <- Vheader EOL FragmentLine+ Score*
	/ FragmentLine+

FragmentLine <- "%%" MidiInstruction EOL
    / Comment EOL
    / Change EOL
    / "w:" Lyrics* EOL
    / Fragment+ (LineCont EOL / LineBreak)?

Fragment <- _ / "y"
	/ InlineChange
	/ NotePunct
	/ NoteConstruct
	/ '"' Gchord '"'
	/ Decoration
	/ "!" ExDecoration "!"
	/ ChordPunct
	/ Chord Tie?
	/ Grace
	/ "(" Nuplet
	/ SlurStart
	/ SlurEnd
	/ Bar SimpleAlter
	/ Bar
	/ Alternative

InlineChange <- "[" Change "]"
Change <- KeySig / Unit / TimeSig / Tempo / Part

KeySig <- < "K:" [ \t]* (!EOL [^\]])+ > { abc_change_append(auxil, $1); }
Unit <- < "L:" [ \t]* (!EOL [^\]])+ > { abc_change_append(auxil, $1); }
TimeSig <- < "M:" [ \t]* (!EOL [^\]])+ > { abc_change_append(auxil, $1); }
Part <- < "P:" [ \t]* (!EOL [^\]])+ > #ignore
Tempo <- < "Q:" [ \t]* (!EOL [^\]])+ > { abc_change_append(auxil, $1); }

Special <- "MIDI" / "beginps" / "endps" / "begintext" / "endtext"

Comment <- "%" !"%" (!EOL .)*
	/ "%%" !Special (!EOL .)*

Vheader <- "V:" [ \t]* Vvalue

Vvalue <- < (!EOL .)+ > { abc_voice_append(auxil, $0); }

ChordPunct <- Chord Tie? _* < (">" / "<")+ > _* Chord Tie? { abc_chordpunct_set(auxil, $1); }

NotePunct <- NoteConstruct _* < (">" / "<")+ > _* NoteConstruct { abc_notepunct_set(auxil, $1); }

NoteConstruct <- (Decoration / ("!" ExDecoration "!"))* Note NoteDuration? Tie?

MidiInstruction <- < "MIDI" [ \t] (!EOL .)* > { abc_instruction_append(auxil, $0); }

Lyrics <- < (!EOL .)+ > { abc_lyrics_append(auxil, $1); }

Tie <- < "-" > { abc_tie_append(auxil, $0); }

Grace <- < "{/" / "{" > { abc_grace_append(auxil, $0); } NoteConstruct+ < "}" > { abc_grace_append(auxil, $2); }

Chord <- < "[" > { abc_chord_append(auxil, $0); } NoteConstruct+ < "]" > { abc_chord_append(auxil, $2); } ChordDuration?

_ <- < [ \t] > { abc_space_append(auxil, $0); }

Decoration <- < "." / "~" / "H" / "L" / "M" / "O" / "P" / "S" / "T" / "u" / "v" > { abc_deco_append(auxil, $0); }

ExDecoration <- < [^!]+ > { abc_deco_append(auxil, $0); }

Nuplet <- p:Digits "::" { abc_nuplet_append(auxil, p, 0, 0); }
	/ p:Digits ":" q:Digits ":" r:Digits { abc_nuplet_append(auxil, p, q, r); }
	/ p:Digits ":" q:Digits { abc_nuplet_append(auxil, p, q, 0); }
	/ p:Digits { abc_nuplet_append(auxil, p, 0, 0); }

Digits <- < [0-9]+ > { $$ = atoi($0); }

Gchord <- < [^"]* > { abc_gchord_append(auxil, $0); }

SlurStart <- < "(" > { abc_slur_append(auxil, $0); }

SlurEnd <- < ")" > { abc_slur_append(auxil, $0); }

SimpleAlter <- < [1-9]+([-,][1-9]+)* > { abc_alt_append(auxil, $0); }

Alternative <- < "["[1-9]+([-,][1-9]+)* > { abc_alt_append(auxil, $0); }

Bar <- < "["?[:|\]]+ > { abc_bar_append(auxil, $0); }

ChordDuration <- < [0-9]*"/" > { abc_duration_chord_num_set(auxil, $0); } < [1-9][0-9]* > { abc_duration_chord_den_set(auxil, $2); }
	/ < [0-9]+ > { abc_duration_chord_num_set(auxil, $0); }
	/ < "/"+ > { abc_duration_chord_den_set(auxil, $0); }

NoteDuration <- < [0-9]*"/" > { abc_duration_num_set(auxil, $0); } < [1-9][0-9]* > { abc_duration_den_set(auxil, $2); }
	/ < [0-9]+ > { abc_duration_num_set(auxil, $0); }
	/ < "/"+ > { abc_duration_den_set(auxil, $0); }

Note <- < ([_=^]*[A-Ga-g][,']* / [XxZz]) > { abc_note_append(auxil, $0); }

EOL <- "\r\n" / "\r" / "\n"

LineCont <- "\\" [ \t]*

LineBreak <- < EOL > { if (($1)[0] == auxil->tunes[auxil->count -1]->lbc) abc_eol_append(auxil, $1); }
    / < (!Fragment .) > { if (($2)[0] == auxil->tunes[auxil->count -1]->lbc) abc_eol_append(auxil, $2); else { auxil->buffer->index = $2s; gen_error(auxil); } }

EOF <- !.
